#!/usr/bin/env php

<?php

$VERSION = "0.0.12";

// Define the commands to run
$COMMANDS = [
    "loadavg" => "cat /proc/loadavg",
    "disks" => "df",
    "inodes" => "df -i",
    "iostat" => "iostat -x 2 2",
    "cpu" => "cat /proc/cpuinfo",
    "cpu_temperature" => "sensors",
    "cpu_dmi" => "dmidecode -t processor",
    "lsb" => "lsb_release -a",
    "memory" => "cat /proc/meminfo",
    "memory_dmi" => "dmidecode --type 17",
    "date" => "date +%s",
    "ifconfig" => "ifconfig",
    "ssacli" => "ssacli ctrl all show config",
    "perccli" => "perccli64 /c0 show",
    "system" => "dmidecode -t system",
    "upaimte" => "cat /proc/uptime",
    "uptime_cmd" => "uptime",
    "uname" => "uname -mrs",
    "netstat_statistics" => "netstat -s",
    "netstat_listen_tcp" => "netstat -antp | grep LISTEN",
    "netstat_listen_udp" => "netstat -anup | grep LISTEN",
    "freebsd_top" => "top -n",

    # list docker compose stacks
    "docker_compose_stacks" => "docker compose ls --format json",

    "lshw" => "lshw",
    "ufw_status" => "ufw status verbose",

    # list installed APT packages
    "apt_list" => "apt list --installed"
];

$FUNCTIONS = [
    "reboot" => fn() => file_exists("/var/run/reboot-required"),
    "updates" => fn() => file_get_contents("/var/lib/update-notifier/updates-available")
];

$RESULTS = [];
$TOKEN = "";
$URL = "";

function usage()
{
    echo "Usage: monitor -i <DEVICE_ID> -t <DEVICE_TOKEN> -s <SERVER_URL>\n";
    exit(1);
}

function parse_args()
{
    global $URL, $TOKEN;
    $options = getopt('i:t:s:');

    if ($options === false) {
        usage();
    }

    if (! isset($options["s"]) || ! isset($options["i"]) || ! isset($options["t"])) {
        usage();
    }

    $URL = $options["s"] . "/api/record/" . $options["i"];
    $TOKEN = $options["t"];
}

function run_commands()
{
    global $COMMANDS, $FUNCTIONS, $RESULTS, $TOKEN, $VERSION;

    foreach ($COMMANDS as $key => $cmd) {
        echo "Running $key ... ";
        $output = shell_exec($cmd . " 2> /dev/null");
        if ($output !== null) {
            echo "ok\n";
            $RESULTS[$key] = trim($output);
        } else {
            echo "E\n";
        }
    }

    foreach ($FUNCTIONS as $key => $fn) {
        echo "Running $key ... ";
        $output = @$fn();
        if ($output !== null) {
            echo "ok\n";
            $RESULTS[$key] = trim($output);
        } else {
            echo "E\n";
            $RESULTS[$key] = 'Error executing function';
        }
    }

    // append token and version
    $RESULTS["token"] = $TOKEN;
    $RESULTS["version"] = $VERSION;
}

function upload_results()
{
    global $URL, $RESULTS;
    // Encode JSON safely
    $json = json_encode($RESULTS, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);

    echo "Upload to $URL ...\n";
    // Upload with cURL
    $ch = curl_init($URL);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    // Show result
    echo "Result: $httpCode\n";
}

echo "Monitoring $VERSION\n";
echo "https://gitlab.cylab.be/cylab/monitoring\n";
parse_args();
run_commands();
upload_results();
