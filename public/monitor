#!/usr/bin/env bash

VERSION="0.0.12"

# Define associative array of commands
declare -A COMMANDS
COMMANDS=(
  ["loadavg"]="cat /proc/loadavg"
  ["reboot"]="$(test -f /var/run/reboot-required && echo '/var/run/reboot-required exists')"
  ["updates"]="cat /var/lib/update-notifier/updates-available"
  ["disks"]="df"
  ["inodes"]="df -i"
  ["iostat"]="iostat -x 2 2"
  ["cpu"]="cat /proc/cpuinfo"
  ["cpu_temperature"]="sensors"
  ["cpu_dmi"]="dmidecode -t processor"
  ["lsb"]="lsb_release -a"
  ["memory"]="cat /proc/meminfo"
  ["memory_dmi"]="dmidecode --type 17"
  ["date"]="date +%s"
  ["ifconfig"]="ifconfig"
  ["ssacli"]="ssacli ctrl all show config"
  ["perccli"]="perccli64 /c0 show"
  ["system"]="dmidecode -t system"
  ["upaimte"]="cat /proc/uptime"
  ["uptime_cmd"]="uptime"
  ["uname"]="uname -mrs"
  ["netstat_statistics"]="netstat -s"
  ["netstat_listen_tcp"]="netstat -antp | grep LISTEN"
  ["netstat_listen_udp"]="netstat -anup | grep LISTEN"
  ["freebsd_top"]="top -n"

  # list docker compose stacks
  ["docker_compose_stacks"]="docker compose ls --format json"

  #["lshw"]="lshw"
  ["ufw_status"]="ufw status verbose"

  # list installed APT packages
  #["apt_list"]="apt list --installed"
)

# declare global variable for results
declare -A RESULTS

usage() {
  echo "Usage: $0 -i <SERVER_ID> -t <SERVER_TOKEN> -s <MONITOR_URL>"
  exit 1
}

parse_args() {
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -s)
        API_URL="$2"
        shift 2
        ;;
      -i)
        ID="$2"
        shift 2
        ;;
      -t)
        TOKEN="$2"
        shift 2
        ;;
      -*)
        echo "Unknown option: $1"
        usage
        ;;
      *)
        echo "Unexpected argument: $1"
        usage
        ;;
    esac
  done

  # Ensure the API URL is provided
  if [ -z "$API_URL" ]; then
    echo "Error: -s argument is required."
    usage
  fi

  # Ensure the API URL is provided
  if [ -z "$ID" ]; then
    echo "Error: -i argument is required."
    usage
  fi

  # Ensure the API URL is provided
  if [ -z "$TOKEN" ]; then
    echo "Error: -t argument is required."
    usage
  fi

  URL="$API_URL/api/record/$ID"
}

run_commands() {
  for key in "${!COMMANDS[@]}"; do
    echo "Running $key ..."
    output=$(${COMMANDS[$key]})
    RESULTS["$key"]="$output"
  done

  # Append version and token
  RESULTS["version"]="$VERSION"
  RESULTS["token"]="$TOKEN"
}


upload_results() {
  TMPFILE=$(mktemp)

  # Build JSON dynamically using jq
  # Build a jq input string with key-value arguments
  jq_args=()
  jq_obj="{"
  for key in "${!RESULTS[@]}"; do
    jq_args+=(--arg "$key" "${RESULTS[$key]}")
    jq_obj+="\"$key\": \$$key,"
  done

  # Remove trailing comma and close JSON object
  jq_obj="${jq_obj%,}}"  

  # Dump to temp file
  jq -n "${jq_args[@]}" "$jq_obj" > "$TMPFILE"

  # Upload
  echo "Uploading to $URL ..."
  curl -s -X POST "$URL" \
      -H "Content-Type: application/json" \
      --data-binary @"$TMPFILE" > /dev/null
}

main() {
  echo "Monitoring $VERSION"
  echo "https://gitlab.cylab.be/cylab/monitoring"
  parse_args "$@"
  run_commands
  upload_results
}

main "$@"